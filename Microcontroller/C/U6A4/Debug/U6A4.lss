
U6A4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ab3  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009de  00000000  00000000  00000c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000275  00000000  00000000  0000166d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000018e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a9  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007d  00000000  00000000  00001db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001e2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  bc:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:

int main() {
	char count = 0;
	char in, prevIn;

	DDRB |= 0x02;
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~0x40;
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	8f 7b       	andi	r24, 0xBF	; 191
  ce:	8a b9       	out	0x0a, r24	; 10
	prevIn = PIND;
  d0:	29 b1       	in	r18, 0x09	; 9
 */ 

#include <avr/io.h>

int main() {
	char count = 0;
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <main+0x14>
		if ((in ^ prevIn) & 0x40) {	// state changed
			count++;
			prevIn = in;
			if (count == 5) {
				PORTB = PINB ^ 0x02;
				count = 0;
  d6:	28 2f       	mov	r18, r24
	DDRB |= 0x02;
	DDRD &= ~0x40;
	prevIn = PIND;

	while (1) {
		in = PIND;
  d8:	89 b1       	in	r24, 0x09	; 9
		if ((in ^ prevIn) & 0x40) {	// state changed
  da:	92 2f       	mov	r25, r18
  dc:	98 27       	eor	r25, r24
  de:	96 ff       	sbrs	r25, 6
  e0:	fb cf       	rjmp	.-10     	; 0xd8 <main+0x14>
			count++;
  e2:	3f 5f       	subi	r19, 0xFF	; 255
			prevIn = in;
			if (count == 5) {
  e4:	35 30       	cpi	r19, 0x05	; 5
  e6:	b9 f7       	brne	.-18     	; 0xd6 <main+0x12>
				PORTB = PINB ^ 0x02;
  e8:	23 b1       	in	r18, 0x03	; 3
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	92 27       	eor	r25, r18
  ee:	95 b9       	out	0x05, r25	; 5
				count = 0;
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f1 cf       	rjmp	.-30     	; 0xd6 <main+0x12>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
